#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoLibDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VideothequeDB")]
	public partial class VideoDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertDirector(Director instance);
    partial void UpdateDirector(Director instance);
    partial void DeleteDirector(Director instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMovieActor(MovieActor instance);
    partial void UpdateMovieActor(MovieActor instance);
    partial void DeleteMovieActor(MovieActor instance);
    partial void InsertMovieDirector(MovieDirector instance);
    partial void UpdateMovieDirector(MovieDirector instance);
    partial void DeleteMovieDirector(MovieDirector instance);
    partial void InsertMovieGenre(MovieGenre instance);
    partial void UpdateMovieGenre(MovieGenre instance);
    partial void DeleteMovieGenre(MovieGenre instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderMovie(OrderMovie instance);
    partial void UpdateOrderMovie(OrderMovie instance);
    partial void DeleteOrderMovie(OrderMovie instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public VideoDBDataContext() : 
				base(global::VideoLibDAL.Properties.Settings.Default.VideothequeDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VideoDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<Director> Directors
		{
			get
			{
				return this.GetTable<Director>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<MovieActor> MovieActors
		{
			get
			{
				return this.GetTable<MovieActor>();
			}
		}
		
		public System.Data.Linq.Table<MovieDirector> MovieDirectors
		{
			get
			{
				return this.GetTable<MovieDirector>();
			}
		}
		
		public System.Data.Linq.Table<MovieGenre> MovieGenres
		{
			get
			{
				return this.GetTable<MovieGenre>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderMovie> OrderMovies
		{
			get
			{
				return this.GetTable<OrderMovie>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _character;
		
		private EntitySet<MovieActor> _MovieActors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncharacterChanging(string value);
    partial void OncharacterChanged();
    #endregion
		
		public Actor()
		{
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_character", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string character
		{
			get
			{
				return this._character;
			}
			set
			{
				if ((this._character != value))
				{
					this.OncharacterChanging(value);
					this.SendPropertyChanging();
					this._character = value;
					this.SendPropertyChanged("character");
					this.OncharacterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_MovieActor", Storage="_MovieActors", ThisKey="id", OtherKey="id_actor")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Director")]
	public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<MovieDirector> _MovieDirectors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Director()
		{
			this._MovieDirectors = new EntitySet<MovieDirector>(new Action<MovieDirector>(this.attach_MovieDirectors), new Action<MovieDirector>(this.detach_MovieDirectors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Director_MovieDirector", Storage="_MovieDirectors", ThisKey="id", OtherKey="id_Director")]
		public EntitySet<MovieDirector> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Director = this;
		}
		
		private void detach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Director = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Genre()
		{
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_MovieGenres", ThisKey="id", OtherKey="id_genre")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _original_title;
		
		private System.Nullable<int> _runtime;
		
		private string _posterpath;
		
		private EntitySet<MovieActor> _MovieActors;
		
		private EntitySet<MovieDirector> _MovieDirectors;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
		private EntitySet<OrderMovie> _OrderMovies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onoriginal_titleChanging(string value);
    partial void Onoriginal_titleChanged();
    partial void OnruntimeChanging(System.Nullable<int> value);
    partial void OnruntimeChanged();
    partial void OnposterpathChanging(string value);
    partial void OnposterpathChanged();
    #endregion
		
		public Movie()
		{
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			this._MovieDirectors = new EntitySet<MovieDirector>(new Action<MovieDirector>(this.attach_MovieDirectors), new Action<MovieDirector>(this.detach_MovieDirectors));
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			this._OrderMovies = new EntitySet<OrderMovie>(new Action<OrderMovie>(this.attach_OrderMovies), new Action<OrderMovie>(this.detach_OrderMovies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_original_title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string original_title
		{
			get
			{
				return this._original_title;
			}
			set
			{
				if ((this._original_title != value))
				{
					this.Onoriginal_titleChanging(value);
					this.SendPropertyChanging();
					this._original_title = value;
					this.SendPropertyChanged("original_title");
					this.Onoriginal_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runtime", DbType="Int")]
		public System.Nullable<int> runtime
		{
			get
			{
				return this._runtime;
			}
			set
			{
				if ((this._runtime != value))
				{
					this.OnruntimeChanging(value);
					this.SendPropertyChanging();
					this._runtime = value;
					this.SendPropertyChanged("runtime");
					this.OnruntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_posterpath", DbType="VarChar(100)")]
		public string posterpath
		{
			get
			{
				return this._posterpath;
			}
			set
			{
				if ((this._posterpath != value))
				{
					this.OnposterpathChanging(value);
					this.SendPropertyChanging();
					this._posterpath = value;
					this.SendPropertyChanged("posterpath");
					this.OnposterpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieActor", Storage="_MovieActors", ThisKey="id", OtherKey="id_Movie")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieDirector", Storage="_MovieDirectors", ThisKey="id", OtherKey="id_Movie")]
		public EntitySet<MovieDirector> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieGenre", Storage="_MovieGenres", ThisKey="id", OtherKey="id_Movie")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_OrderMovie", Storage="_OrderMovies", ThisKey="id", OtherKey="idMovie")]
		public EntitySet<OrderMovie> OrderMovies
		{
			get
			{
				return this._OrderMovies;
			}
			set
			{
				this._OrderMovies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_OrderMovies(OrderMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_OrderMovies(OrderMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieActor")]
	public partial class MovieActor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_Movie;
		
		private int _id_actor;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_MovieChanging(int value);
    partial void Onid_MovieChanged();
    partial void Onid_actorChanging(int value);
    partial void Onid_actorChanged();
    #endregion
		
		public MovieActor()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Movie", DbType="Int NOT NULL")]
		public int id_Movie
		{
			get
			{
				return this._id_Movie;
			}
			set
			{
				if ((this._id_Movie != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_MovieChanging(value);
					this.SendPropertyChanging();
					this._id_Movie = value;
					this.SendPropertyChanged("id_Movie");
					this.Onid_MovieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_actor", DbType="Int NOT NULL")]
		public int id_actor
		{
			get
			{
				return this._id_actor;
			}
			set
			{
				if ((this._id_actor != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_actorChanging(value);
					this.SendPropertyChanging();
					this._id_actor = value;
					this.SendPropertyChanged("id_actor");
					this.Onid_actorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_MovieActor", Storage="_Actor", ThisKey="id_actor", OtherKey="id", IsForeignKey=true)]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._id_actor = value.id;
					}
					else
					{
						this._id_actor = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieActor", Storage="_Movie", ThisKey="id_Movie", OtherKey="id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._id_Movie = value.id;
					}
					else
					{
						this._id_Movie = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieDirector")]
	public partial class MovieDirector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_Movie;
		
		private int _id_Director;
		
		private EntityRef<Director> _Director;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_MovieChanging(int value);
    partial void Onid_MovieChanged();
    partial void Onid_DirectorChanging(int value);
    partial void Onid_DirectorChanged();
    #endregion
		
		public MovieDirector()
		{
			this._Director = default(EntityRef<Director>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Movie", DbType="Int NOT NULL")]
		public int id_Movie
		{
			get
			{
				return this._id_Movie;
			}
			set
			{
				if ((this._id_Movie != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_MovieChanging(value);
					this.SendPropertyChanging();
					this._id_Movie = value;
					this.SendPropertyChanged("id_Movie");
					this.Onid_MovieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Director", DbType="Int NOT NULL")]
		public int id_Director
		{
			get
			{
				return this._id_Director;
			}
			set
			{
				if ((this._id_Director != value))
				{
					if (this._Director.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DirectorChanging(value);
					this.SendPropertyChanging();
					this._id_Director = value;
					this.SendPropertyChanged("id_Director");
					this.Onid_DirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Director_MovieDirector", Storage="_Director", ThisKey="id_Director", OtherKey="id", IsForeignKey=true)]
		public Director Director
		{
			get
			{
				return this._Director.Entity;
			}
			set
			{
				Director previousValue = this._Director.Entity;
				if (((previousValue != value) 
							|| (this._Director.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Director.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._Director.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._id_Director = value.id;
					}
					else
					{
						this._id_Director = default(int);
					}
					this.SendPropertyChanged("Director");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieDirector", Storage="_Movie", ThisKey="id_Movie", OtherKey="id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._id_Movie = value.id;
					}
					else
					{
						this._id_Movie = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieGenre")]
	public partial class MovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_Movie;
		
		private int _id_genre;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_MovieChanging(int value);
    partial void Onid_MovieChanged();
    partial void Onid_genreChanging(int value);
    partial void Onid_genreChanged();
    #endregion
		
		public MovieGenre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Movie", DbType="Int NOT NULL")]
		public int id_Movie
		{
			get
			{
				return this._id_Movie;
			}
			set
			{
				if ((this._id_Movie != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_MovieChanging(value);
					this.SendPropertyChanging();
					this._id_Movie = value;
					this.SendPropertyChanged("id_Movie");
					this.Onid_MovieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_genre", DbType="Int NOT NULL")]
		public int id_genre
		{
			get
			{
				return this._id_genre;
			}
			set
			{
				if ((this._id_genre != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_genreChanging(value);
					this.SendPropertyChanging();
					this._id_genre = value;
					this.SendPropertyChanged("id_genre");
					this.Onid_genreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_Genre", ThisKey="id_genre", OtherKey="id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._id_genre = value.id;
					}
					else
					{
						this._id_genre = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_MovieGenre", Storage="_Movie", ThisKey="id_Movie", OtherKey="id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._id_Movie = value.id;
					}
					else
					{
						this._id_Movie = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _userId;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private EntitySet<OrderMovie> _OrderMovies;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuserIdChanging(System.Nullable<int> value);
    partial void OnuserIdChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    #endregion
		
		public Order()
		{
			this._OrderMovies = new EntitySet<OrderMovie>(new Action<OrderMovie>(this.attach_OrderMovies), new Action<OrderMovie>(this.detach_OrderMovies));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int")]
		public System.Nullable<int> userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderMovie", Storage="_OrderMovies", ThisKey="Id", OtherKey="idOrder")]
		public EntitySet<OrderMovie> OrderMovies
		{
			get
			{
				return this._OrderMovies;
			}
			set
			{
				this._OrderMovies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="userId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._userId = value.Id;
					}
					else
					{
						this._userId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderMovies(OrderMovie entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderMovies(OrderMovie entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderMovie")]
	public partial class OrderMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _idMovie;
		
		private System.Nullable<int> _idOrder;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidMovieChanging(System.Nullable<int> value);
    partial void OnidMovieChanged();
    partial void OnidOrderChanging(System.Nullable<int> value);
    partial void OnidOrderChanged();
    #endregion
		
		public OrderMovie()
		{
			this._Movie = default(EntityRef<Movie>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMovie", DbType="Int")]
		public System.Nullable<int> idMovie
		{
			get
			{
				return this._idMovie;
			}
			set
			{
				if ((this._idMovie != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMovieChanging(value);
					this.SendPropertyChanging();
					this._idMovie = value;
					this.SendPropertyChanged("idMovie");
					this.OnidMovieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", DbType="Int")]
		public System.Nullable<int> idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_OrderMovie", Storage="_Movie", ThisKey="idMovie", OtherKey="id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.OrderMovies.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.OrderMovies.Add(this);
						this._idMovie = value.id;
					}
					else
					{
						this._idMovie = default(Nullable<int>);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderMovie", Storage="_Order", ThisKey="idOrder", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderMovies.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderMovies.Add(this);
						this._idOrder = value.Id;
					}
					else
					{
						this._idOrder = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _address;
		
		private System.Nullable<char> _sex;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnsexChanging(System.Nullable<char> value);
    partial void OnsexChanged();
    #endregion
		
		public User()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(800)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="Char(1)")]
		public System.Nullable<char> sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Orders", ThisKey="Id", OtherKey="userId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
